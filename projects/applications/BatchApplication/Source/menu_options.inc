//
// The following table implements systemsetting options that need to be added to the OS or overruled
//
// Note: The use of 'systemsetting()' inside the functions in the table below is limited to a protect against recursion,
//       It is still possible to use systemsetting() but only with a 1 menu option per function call.
//
const OPTION batch_menu_option_table[] =
{														// CLEAR mask                           SET mask (use 0xFF 0xFF in case of a function call)
	{ "OPND",(void*)OseCommDefault,						0xFF,                                   0xFF                        },
	{ "C04",(void*)UsbMsdDefault,						0xFF,                                   0xFF                        },

	{ "GC",(void*)&(app.buzzer_options),				0x00,                                   STARTUP_BUZZER              },
	{ "GD",(void*)&(app.buzzer_options),				STARTUP_BUZZER,                         0x00                        },
#ifndef HAS_2D_ENGINE
	{ "S0",(void*)&(app.read_mode),						0xFF,                                   SCAN_SINGLE					},
    { "S1",(void*)&(app.read_mode),						0xFF,                                   SCAN_MULTIPLE				},
    { "S2",(void*)&(app.read_mode),						0xFF,                                   SCAN_CONTINUOUS				},
	{ "Y0",(void*)&(app.read_time),						0xFF,                                   0							},
    { "Y1",(void*)&(app.read_time),                     0xFF,                                   10							},
    { "Y2",(void*)&(app.read_time),                     0xFF,                                   20							},
    { "Y3",(void*)&(app.read_time),                     0xFF,                                   30							},
    { "Y4",(void*)&(app.read_time),                     0xFF,                                   40							},
    { "Y5",(void*)&(app.read_time),                     0xFF,                                   50							},
    { "Y6",(void*)&(app.read_time),                     0xFF,                                   60							},
    { "Y7",(void*)&(app.read_time),                     0xFF,                                   70							},
    { "Y8",(void*)&(app.read_time),                     0xFF,                                   80							},
    { "Y9",(void*)&(app.read_time),                     0xFF,                                   90							},
    { "YM",(void*)&(app.read_time),                     0xFF,                                   READ_TIME_INDEFINITELY		},
	{ "Z2",(void*)StoreApplicationSettings,				0xFF,									0xFF						},
#endif    

	// The following menu options are non-official OSE menu options, which have been added for output file formatting
	{ "+D0",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_DD_MM_YYYY	},
	{ "+D1",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_MM_DD_YYYY },	
	{ "+D2",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_DD_MM_YY   },	
	{ "+D3",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_MM_DD_YY   },	
	{ "+D4",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_YYYY_MM_DD	},
	{ "+D5",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_YY_MM_DD	},
	{ "+D6",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_DD_MM		},
	{ "+D7",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_DASH_MM_DD		},		
	{ "+D8",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_DD_MM_YYYY},
	{ "+D9",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_MM_DD_YYYY},
	{ "+DA",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_DD_MM_YY	},
	{ "+DB",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_MM_DD_YY	},
	{ "+DC",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_YYYY_MM_DD},
	{ "+DD",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_YY_MM_DD	},
	{ "+DE",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_DD_MM		},
	{ "+DF",(void*)&(app.output.date_time_format),		DATE_FORMAT_MASK,						DATE_FORMAT_SLASH_MM_DD		},
    { "+T0",(void*)&(app.output.date_time_format),		TIME_FORMAT_MASK,						TIME_FORMAT_HH_MM_SS        },
    { "+T1",(void*)&(app.output.date_time_format),		TIME_FORMAT_MASK,						TIME_FORMAT_HH_MM           },
	{ "+FA",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_SPACE		},
	{ "+FC",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_COMMA		},
	{ "+FG",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_GS			},
	{ "+FH",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_SEMICOLON	},
	{ "+FL",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_LF			},
	{ "+FP",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_PIPE		},
	{ "+FR",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_CR			},
	{ "+FS",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_SLASH		},
	{ "+FT",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_TAB			},
	{ "+FZ",(void*)&(app.output.field_separator),		0xFF,									FIELD_SEPARATOR_ZERO		},
	//{ "+NO",(void*)&(app.special_options),			\OSECOMM_COMMUNICATE,					NETO_COMMUNICATE			},
	{ "+OC",(void*)&(app.special_options),				NETO_COMMUNICATE,						OSECOMM_COMMUNICATE			},
	{ "+Q0",(void*)&(app.output.quantity_size),			0xFF,									0x00						},
	{ "+Q1",(void*)&(app.output.quantity_size),			0xFF,									0x01						},
	{ "+Q2",(void*)&(app.output.quantity_size),			0xFF,									0x02						},
	{ "+Q3",(void*)&(app.output.quantity_size),			0xFF,									0x03						},
	{ "+Q4",(void*)&(app.output.quantity_size),			0xFF,									0x04						},
	{ "+Q5",(void*)&(app.output.quantity_size),			0xFF,									0x05						},
	{ "+Q6",(void*)&(app.output.quantity_size),			0xFF,									0x06						},
	{ "+Q7",(void*)&(app.output.quantity_size),			0xFF,									0x07						},
	{ "+Q8",(void*)&(app.output.quantity_size),			0xFF,									0x08						},
	{ "+Q9",(void*)&(app.output.quantity_size),			0xFF,									0x09						},
	{ "+QB",(void*)&(app.output.quantity_options),		0x00,									QUANTITY_DELETE_KEY_DISABLED},    
	{ "+QC",(void*)&(app.output.quantity_options),		QUANTITY_DELETE_KEY_DISABLED,			0x00						},
// Copied from Bluetooth application
	{ "DELD",(void*)&(app.output.quantity_options),		0x00,									QUANTITY_DELETE_KEY_DISABLED},    
	{ "DELE",(void*)&(app.output.quantity_options),		QUANTITY_DELETE_KEY_DISABLED,			0x00						},
//
	{ "+QN",(void*)&(app.output.quantity_options),		0x00,									QUANTITY_ALLOW_NEGATIVE_QNTY},
	{ "+QP",(void*)&(app.output.quantity_options),		QUANTITY_ALLOW_NEGATIVE_QNTY,			0x00						},
	{ "+QY",(void*)&(app.output.quantity_options),		QUANTITY_DELETE_ZERO_QNTY,				0x00						},
	{ "+QZ",(void*)&(app.output.quantity_options),		0x00,									QUANTITY_DELETE_ZERO_QNTY	},
	{ "+B00",(void*)&(app.output.barcode_size),			0x0F,									0x00						},
	{ "+B01",(void*)&(app.output.barcode_size),			0x0F,									0x01						},
	{ "+B02",(void*)&(app.output.barcode_size),			0x0F,									0x02						},
	{ "+B03",(void*)&(app.output.barcode_size),			0x0F,									0x03						},
	{ "+B04",(void*)&(app.output.barcode_size),			0x0F,									0x04						},
	{ "+B05",(void*)&(app.output.barcode_size),			0x0F,									0x05						},
	{ "+B06",(void*)&(app.output.barcode_size),			0x0F,									0x06						},
	{ "+B07",(void*)&(app.output.barcode_size),			0x0F,									0x07						},
	{ "+B08",(void*)&(app.output.barcode_size),			0x0F,									0x08						},
	{ "+B09",(void*)&(app.output.barcode_size),			0x0F,									0x09						},
	{ "+B0-",(void*)&(app.output.barcode_size),			0xF0,									0x00						},
	{ "+B10",(void*)&(app.output.barcode_size),			0xF0,									0x10						},
	{ "+B20",(void*)&(app.output.barcode_size),			0xF0,									0x20						},
	{ "+B30",(void*)&(app.output.barcode_size),			0xF0,									0x30						},
	{ "+B40",(void*)&(app.output.barcode_size),			0xF0,									0x40						},
	{ "+B50",(void*)&(app.output.barcode_size),			0xF0,									0x50						},
	{ "+B60",(void*)&(app.output.barcode_size),			0xF0,									0x60						},
	{ "+B70",(void*)&(app.output.barcode_size),			0xF0,									0x70						},
	{ "+B80",(void*)&(app.output.barcode_size),			0xF0,									0x80						},
	{ "+B90",(void*)&(app.output.barcode_size),			0xF0,									0x90						},
	{ "+DEL",(void*)&(app.func_key_del),				0x00,									0x01						},
	{ "+DNO",(void*)&(app.func_key_del),				0x01,									0x00						},
	{ "+S0B",(void*)&(app.output.sequence[0]),			0xFF,									SEQUENCE_BARCODE			},
	{ "+S0D",(void*)&(app.output.sequence[0]),			0xFF,									SEQUENCE_DATE				},
	{ "+S0T",(void*)&(app.output.sequence[0]),			0xFF,									SEQUENCE_TIME				},
	{ "+S0S",(void*)&(app.output.sequence[0]),			0xFF,									SEQUENCE_SERIAL_NUMBER		},
	{ "+S0Q",(void*)&(app.output.sequence[0]),			0xFF,									SEQUENCE_QUANTITY			},
	{ "+S1N",(void*)&(app.output.sequence[1]),			0xFF,									SEQUENCE_NONE				},
	{ "+S1B",(void*)&(app.output.sequence[1]),			0xFF,									SEQUENCE_BARCODE			},
	{ "+S1D",(void*)&(app.output.sequence[1]),			0xFF,									SEQUENCE_DATE				},
	{ "+S1T",(void*)&(app.output.sequence[1]),			0xFF,									SEQUENCE_TIME				},
	{ "+S1S",(void*)&(app.output.sequence[1]),			0xFF,									SEQUENCE_SERIAL_NUMBER		},
	{ "+S1Q",(void*)&(app.output.sequence[1]),			0xFF,									SEQUENCE_QUANTITY			},
	{ "+S2N",(void*)&(app.output.sequence[2]),			0xFF,									SEQUENCE_NONE				},
	{ "+S2B",(void*)&(app.output.sequence[2]),			0xFF,									SEQUENCE_BARCODE			},
	{ "+S2D",(void*)&(app.output.sequence[2]),			0xFF,									SEQUENCE_DATE				},
	{ "+S2T",(void*)&(app.output.sequence[2]),			0xFF,									SEQUENCE_TIME				},
	{ "+S2S",(void*)&(app.output.sequence[2]),			0xFF,									SEQUENCE_SERIAL_NUMBER		},
	{ "+S2Q",(void*)&(app.output.sequence[2]),			0xFF,									SEQUENCE_QUANTITY			},
	{ "+S3N",(void*)&(app.output.sequence[3]),			0xFF,									SEQUENCE_NONE				},
	{ "+S3B",(void*)&(app.output.sequence[3]),			0xFF,									SEQUENCE_BARCODE			},
	{ "+S3D",(void*)&(app.output.sequence[3]),			0xFF,									SEQUENCE_DATE				},
	{ "+S3T",(void*)&(app.output.sequence[3]),			0xFF,									SEQUENCE_TIME				},
	{ "+S3S",(void*)&(app.output.sequence[3]),			0xFF,									SEQUENCE_SERIAL_NUMBER		},
	{ "+S3Q",(void*)&(app.output.sequence[3]),			0xFF,									SEQUENCE_QUANTITY			},
	{ "+S4N",(void*)&(app.output.sequence[4]),			0xFF,									SEQUENCE_NONE				},
	{ "+S4B",(void*)&(app.output.sequence[4]),			0xFF,									SEQUENCE_BARCODE			},
	{ "+S4D",(void*)&(app.output.sequence[4]),			0xFF,									SEQUENCE_DATE				},
	{ "+S4T",(void*)&(app.output.sequence[4]),			0xFF,									SEQUENCE_TIME				},
	{ "+S4S",(void*)&(app.output.sequence[4]),			0xFF,									SEQUENCE_SERIAL_NUMBER		},
	{ "+S4Q",(void*)&(app.output.sequence[4]),			0xFF,									SEQUENCE_QUANTITY			},
	
	{ "+AMN",(void*)EnableAiming,						0xFF,									0xFF						},
	{ "+AMF",(void*)DisableAiming,						0xFF,									0xFF						},
};

#define BATCH_MAX_OPTIONS sizeof(batch_menu_option_table)/sizeof(OPTION)
